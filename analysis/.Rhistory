#geom_vline(data=props, aes(xintercept=-0.5)) +
annotate("segment", x=-0, xend=-0,
y=-Inf, yend=Inf, col="black", lty=1, size=1) +
annotate("rect", xmin=50, xmax=60,
ymin=-Inf, ymax=Inf, fill=K[1], alpha=0.3)+
annotate("rect", xmin=1, xmax=10,
ymin=-Inf, ymax=Inf, fill=K[3], alpha=0.3)+
annotate("rect", xmin=-10, xmax=-1,
ymin=-Inf, ymax=Inf, fill=K[4], alpha=0.3)+
annotate("text", x= -5.5, y=15, label="Base")+
annotate("text", x= 5.5, y=15, label="Acute")+
annotate("text", x= 55, y=15, label="Chronic")+
geom_text(data=traj_total, aes(x= 30, y = MeanC,
label=percent(Prop, accuracy = 0.1)),
vjust=-.5, show.legend=F) +
stat_summary(fun.data = mean_se, geom="line") +
stat_summary(fun.data = mean_cl_normal,
geom="ribbon", alpha = 0.25, col=NA) +
coord_cartesian(ylim=c(0, 15)) +
ylab("Total Number of Memory Intrusions") +
scale_color_d3() +
scale_fill_d3() +
theme_pander()
T_observed <- c(0.657, 0.208, 0.106, 0.089)
names(T_observed) <- c("Resilient", "Recovery", "Chronic", "Delayed")
props <- patterns %>%
group_by(Trajectory,
I,
gamma,
C,
W,
R,
#A,
) %>%
dplyr::summarize(N = length(Trajectory)) %>%
dplyr::mutate(Prop = N/50)
props %>%
pivot_wider(id_cols=c(I,
gamma,
C,
W,
R,
#A,
),
names_from = Trajectory,
values_from = N,
values_fill=0) -> test
mychi <- function(vals) {
chisq.test(vals,
p=T_observed,
rescale.p=T)$statistic
}
mycorr <- function(vals) {
cor(vals, T_observed)
}
myrmse <- function(vals) {
v <- 50 * (T_observed/sum(T_observed))
sqrt(mean((vals - v)^2))
}
lprops <- test %>%
pivot_longer(cols=c("Resilient", "Recovery", "Chronic", "Delayed"),
names_to = "Trajectory",
values_to = "N")
lprops$Trajectory <- factor(lprops$Trajectory,
levels = c("Recovery", "Delayed", "Resilient",  "Chronic"))
# Suppresses X-squared approximation warnings
old.warn <- options()$warn
options(warn = -1)
atest <- lprops %>%
group_by(I,
gamma,
C,
W,
R,
#A,
) %>%
summarise(Chi = mychi(N), r=mycorr(N), RMSE=myrmse(N))
# resets warnings
options(warn = old.warn)
test <- inner_join(test, atest)
ggplot(test, aes(x=Chi, y=r, col=RMSE)) +
geom_point(size=4, alpha=0.5) +
scale_color_viridis(option="plasma")+
ylab(expression(italic(r))) +
xlab(expression(chi^2)) +
ggtitle("Relationship between Error Measures in Trajectories") +
theme_pander()
baseline <- test %>%
filter(Chi == min(test$Chi))
baseline %>%
kable(digits=3) %>%
kable_styling(bootstrap_options = c("hover", "striped"))
baseline_a <- a %>%
filter(I == baseline$I,
W == baseline$W,
C == baseline$C,
R == baseline$R,
gamma == baseline$gamma,
)
base_total <- baseline_a %>%
filter(Day == 15) %>%
group_by(Trajectory) %>%
summarise(N = length(CTraumatic),
Prop = length(CTraumatic)/100,
MeanC = mean(CTraumatic))
ggplot(baseline_a,
aes(x=Day, y=CTraumatic, col=Trajectory, fill=Trajectory)) +
geom_smooth(method="loess", span=0.2) +
ggtitle("Trajectories for Best-Fitting Parameters") +
scale_color_d3() +
geom_text(data=base_total, aes(x= c(25, 10, 20, 10), y = MeanC,
label=percent(Prop, accuracy = 0.1)),
vjust=-.5, show.legend=F) +
ylab("Total Number of Memory Intrusions") +
geom_vline(data=props, aes(xintercept=-0.25)) +
scale_fill_d3() +
theme_pander()
baseline_vals <- baseline[c("Resilient", "Recovery", "Chronic", "Delayed")]
chi <- chisq.test(baseline_vals, p=T_observed, rescale.p = T)
grand <- a %>%
group_by(W, I, C, gamma, R, Trajectory) %>%
summarize(Prob = length(Trajectory) / 100)
grand_f <- grand %>%
group_by(W, I, C, gamma, R) %>%
filter(Prob == max(Prob)) %>%
rename(PredictedTrajectory = Trajectory)
forward_prediction <- full_join(patterns, grand_f) %>%
mutate(Accuracy = if_else(Trajectory == PredictedTrajectory, 1, 0))
forward_prediction %>%
filter(I > 1) %>%
group_by(Trajectory) %>%
summarise(Accuracy = mean(Accuracy))
forward_prediction %>%
filter(I > 1) %>%
summarise(Accuracy = mean(Accuracy))
forward_prediction$Trajectory <- factor(forward_prediction$Trajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_prediction$PredictedTrajectory <- factor(forward_prediction$PredictedTrajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_percentages <- forward_prediction %>%
filter(I > 1) %>%
ungroup() %>%
group_by(Trajectory, PredictedTrajectory) %>%
summarise(Count = length(Prob)) %>%
ungroup() %>%
group_by(Trajectory) %>%
mutate(Percent = Count / sum(Count))
ggplot(forward_percentages, aes(x=PredictedTrajectory, y=Trajectory, fill=Percent)) +
geom_tile(col="white") +
scale_fill_viridis(option="inferno", end=0.8) +
ggtitle("Confusion Matrix for Predicted Trajectories") +
geom_text(aes(label = percent(Percent, .1)), col="white") +
theme_pander()
intermediate <- a %>%
filter(Day > 0) %>%
filter(I != 1) %>%
mutate(Condition = paste("(", I,
", ",  C,
", ", W, ")", sep="")) %>%
group_by(Day, I, C, gamma, W, R, Condition)  %>%
summarise(Intrusions=mean(CTraumatic),
SDIntrusions=sd(CTraumatic),)
ggplot(intermediate,
aes(x=Day, y=Intrusions, col=as.factor(gamma))) +
geom_point() +
ylim(0, 50) +
facet_wrap(~ Condition) + #label=label_both) +
geom_vline(data=props, aes(xintercept=-0.15)) +
theme_pander()
get_prob_by_day_5 <- function(n, day, Intensity, Context, WM, gammaval, Rval) {
intermediate %>%
filter(Day == day,
W == WM,
I == Intensity,
C == Context,
R == Rval,
gamma == gammaval) -> sub
m <- sub$Intrusions
sd <- sub$SDIntrusions
dnorm(n, m, sd)
}
CREATE_LOGLIKELIHOODS <- F
if (CREATE_LOGLIKELIHOODS) {
vals <- NULL
for (n in 0:max(a$CTraumatic)) {
print(n)
for (d in unique(intermediate$Day)) {
for (i in unique(intermediate$I)) {
for (c in unique(intermediate$C)) {
for (w in unique(intermediate$W)) {
for (g in unique(intermediate$gamma)) {
for (r in unique(intermediate$R)) {
p <- get_prob_by_day_5(n, d, i, c, w, g, r)
result <- c(n, d, i, c, w, g, r, p)
if (is.null(vals)) {
vals <- result
} else {
vals <- rbind(vals, result)
}
}
}
}
}
}
}
}
vals <- as_tibble(vals)
names(vals) <- c("N", "Day", "I", "C", "W", "gamma", "R", "Probability")
#Replace probabilities=0 with very small values
vals$Probability[vals$Probability < 1e-200] <- 1e-200
vals$Probability[vals$Probability > 1] <- 1
vals$LogLikelihood <- log(vals$Probability)
write_tsv(vals, "loglikelihoods5_60.tsv")
} else {
vals <- read_tsv("loglikelihoods5_60.tsv")
}
k <- NULL
parameters_mle <- function(predicted) {
filtered <- NULL
day <- 1
#print(predicted)
for (n in as_vector(predicted)) {
sub <- vals %>%
filter(Day == day,  N == n)
if (is.null(filtered)) {
filtered <- sub
} else {
filtered <- rbind(filtered, sub)
}
#    print(c(day, n, dim(filtered)))
day <- day + 1
}
filtered
likelihoods <- filtered %>%
group_by(I, C, W, gamma, R) %>%
summarise(LogLikelihood = sum(LogLikelihood))
filter(likelihoods, LogLikelihood == max(likelihoods$LogLikelihood))
}
test <- a %>%
filter(Day > 0, Day <= 20) %>%
filter(W == 4,
C == 0.25,
gamma == 0.9,
I == 60,
R == 20,
A == 4,
Run == 2) %>%
dplyr::select(CTraumatic)
parameters_mle(test)
mle_prediction <- NULL
CREATE_MLE <- F
if (CREATE_MLE) {
options(dplyr.summarise.inform = FALSE)
for (maxday in c(1,10,20)) { #max(a$Day)) {
a_sub <- a %>%
filter(Day > 0, Day <= maxday, I > 1)
jj <- 1
for (i in unique(a_sub$I)) {
for (c in unique(a_sub$C)) {
for (w in unique(a_sub$W)) {
for (g in unique(a_sub$gamma)) {
for (r in unique(a_sub$R)) {
for (att in unique(a_sub$A)) {
print(c(maxday, i, c, w, g, r, att))
for (j in unique(a_sub$Run)) {
values <- a_sub %>%
filter(W == w,
C == c,
gamma == g,
I == i,
R == r,
A == att,
Run == j) %>%
dplyr::select(CTraumatic)
prediction <- as_vector(parameters_mle(values)[1,])
observed <- tibble(Parameters = c("I", "C", "W", "gamma", "R"),
Type = "Observed",
MaxDay = maxday,
Value = c(i, c, w, g, r),
LogLikelihood = prediction[6],
Run = jj)
predicted  <- tibble(Parameters = c("I", "C", "W", "gamma", "R"),
Type = "Prediction",
MaxDay = maxday,
Value = prediction[1:5],
LogLikelihood = prediction[6],
Run = jj)
set <- rbind(observed, predicted)
#print("Done")
if (is.null(mle_prediction)) {
mle_prediction <- set
} else {
mle_prediction <- rbind(mle_prediction, set)
}
jj <- jj+1
}
}
}
}
}
}
}
}
options(dplyr.summarise.inform = T)
write_csv(mle_prediction, "mle_predictions5_alldays_01_20.csv")
} else {
mle_predictions <- read_csv("mle_predictions5_alldays.csv")
}
mle_predictions <- mle_predictions %>%
group_by(Parameters, MaxDay) %>%
mutate(ScaledValue = Value / max(Value))
wmle_predictions <- mle_predictions %>%
dplyr::select(-ScaledValue) %>%
pivot_wider(values_from = "Value", names_from = "Type")
ggplot(wmle_predictions, aes(x=Prediction, y=Observed)) +
geom_count(alpha=.75, aes(size = ..prop.., col=..prop..)) +
geom_smooth(method="lm", col="red") +
facet_wrap(MaxDay~Parameters, scales="free", ncol=5) +
theme_pander()
newbackpred <- wmle_predictions %>%
mutate(SObserved = as.character(Observed),
SPredicted = as.character(Prediction)) %>%
ungroup() %>%
group_by(Parameters, MaxDay) %>%
mutate(Count = length(Run)) %>%
ungroup() %>%
group_by(Parameters, SPredicted, SObserved, MaxDay) %>%
summarise(Percent = length(Count) / mean(Count))
newbackpred$SPredicted[newbackpred$SPredicted == "4"] <- "04"
newbackpred$SPredicted[newbackpred$SPredicted == "8"] <- "08"
newbackpred$SObserved[newbackpred$SObserved == "4"] <- "04"
newbackpred$SObserved[newbackpred$SObserved == "8"] <- "08"
ggplot(newbackpred, aes(x=SPredicted, y=SObserved, fill=Percent)) +
geom_tile(col = "white") +
scale_fill_viridis(option="magma", end=0.8) +
#geom_smooth(method="lm", col="red") +
facet_wrap(MaxDay~Parameters, scales="free", ncol=5) +
geom_text(aes(label = percent(Percent, .1)), col="white") +
theme_pander()
wmle_predictions %>%
ungroup() %>%
mutate(Accuracy = if_else(Prediction == Observed, 1, 0)) %>%
group_by(Parameters, MaxDay) %>%
summarise(Accuracy = mean(Accuracy),
RMSE = sqrt(mean((Prediction - Observed)**2)),
Correlation = cor.test(Prediction, Observed)$estimate) -> accuracies
accuracies
forward_prediction$Trajectory <- factor(forward_prediction$Trajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_prediction$PredictedTrajectory <- factor(forward_prediction$PredictedTrajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_percentages <- forward_prediction %>%
filter(I > 1) %>%
ungroup() %>%
group_by(Trajectory, PredictedTrajectory) %>%
mutate(Count = length(Prob)) %>%
ungroup() %>%
group_by(Trajectory) %>%
summarise(Percent = length(Count) / mean(Count))
ggplot(forward_percentages, aes(x=PredictedTrajectory, y=Trajectory, fill=Percent)) +
geom_tile(col="white") +
scale_fill_viridis(option="inferno", end=0.8) +
ggtitle("Confusion Matrix for Predicted Trajectories") +
geom_text(aes(label = percent(Percent, .1)), col="white") +
theme_pander()
forward_prediction %>%
filter(I > 1) %>%
group_by(Trajectory) %>%
summarise(Accuracy = mean(Accuracy))
forward_prediction %>%
filter(I > 1) %>%
summarise(Accuracy = mean(Accuracy))
forward_prediction$Trajectory <- factor(forward_prediction$Trajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_prediction$PredictedTrajectory <- factor(forward_prediction$PredictedTrajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_percentages <- forward_prediction %>%
filter(I > 1) %>%
ungroup() %>%
group_by(Trajectory, PredictedTrajectory) %>%
mutate(Count = length(Prob)) %>%
ungroup() %>%
group_by(Trajectory) %>%
summarise(Percent = length(Count) / mean(Count))
ggplot(forward_percentages, aes(x=PredictedTrajectory, y=Trajectory, fill=Percent)) +
geom_tile(col="white") +
scale_fill_viridis(option="inferno", end=0.8) +
ggtitle("Confusion Matrix for Predicted Trajectories") +
geom_text(aes(label = percent(Percent, .1)), col="white") +
theme_pander()
forward_prediction
forward_prediction$Trajectory <- factor(forward_prediction$Trajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_prediction$PredictedTrajectory <- factor(forward_prediction$PredictedTrajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_percentages <- forward_prediction %>%
filter(I > 1) %>%
ungroup() %>%
group_by(Trajectory, PredictedTrajectory) %>%
summarize(Percent = length(Prob)/28000) %>%
#ungroup() %>%
#group_by(Trajectory) %>%
#summarise(Percent = length(Count) / mean(Count))
ggplot(forward_percentages, aes(x=PredictedTrajectory, y=Trajectory, fill=Percent)) +
geom_tile(col="white") +
scale_fill_viridis(option="inferno", end=0.8) +
ggtitle("Confusion Matrix for Predicted Trajectories") +
geom_text(aes(label = percent(Percent, .1)), col="white") +
theme_pander()
forward_prediction$Trajectory <- factor(forward_prediction$Trajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_prediction$PredictedTrajectory <- factor(forward_prediction$PredictedTrajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_percentages <- forward_prediction %>%
filter(I > 1) %>%
ungroup() %>%
group_by(Trajectory, PredictedTrajectory) %>%
summarize(Percent = length(Prob)/28000)
#ungroup() %>%
#group_by(Trajectory) %>%
#summarise(Percent = length(Count) / mean(Count))
ggplot(forward_percentages, aes(x=PredictedTrajectory, y=Trajectory, fill=Percent)) +
geom_tile(col="white") +
scale_fill_viridis(option="inferno", end=0.8) +
ggtitle("Confusion Matrix for Predicted Trajectories") +
geom_text(aes(label = percent(Percent, .1)), col="white") +
theme_pander()
forward_prediction$Trajectory <- factor(forward_prediction$Trajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_prediction$PredictedTrajectory <- factor(forward_prediction$PredictedTrajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_percentages <- forward_prediction %>%
filter(I > 1) %>%
group_by(I, C, R, W, gamma) %>%
mutate(Count = length(Prob)) %>%
ungroup() %>%
group_by(Trajectory, PredictedTrajectory) %>%
summarize(Percent = length(Prob)/mean(Count))
#ungroup() %>%
#group_by(Trajectory) %>%
#summarise(Percent = length(Count) / mean(Count))
ggplot(forward_percentages, aes(x=PredictedTrajectory, y=Trajectory, fill=Percent)) +
geom_tile(col="white") +
scale_fill_viridis(option="inferno", end=0.8) +
ggtitle("Confusion Matrix for Predicted Trajectories") +
geom_text(aes(label = percent(Percent, .1)), col="white") +
theme_pander()
forward_percentages
forward_prediction$Trajectory <- factor(forward_prediction$Trajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_prediction$PredictedTrajectory <- factor(forward_prediction$PredictedTrajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_percentages <- forward_prediction %>%
filter(I > 1) %>%
group_by(I, C, R, W, gamma) %>%
mutate(Count = length(Trajectory)) %>%
ungroup() %>%
group_by(Trajectory, PredictedTrajectory) %>%
summarize(Percent = length(Prob)/mean(Count))
#ungroup() %>%
#group_by(Trajectory) %>%
#summarise(Percent = length(Count) / mean(Count))
ggplot(forward_percentages, aes(x=PredictedTrajectory, y=Trajectory, fill=Percent)) +
geom_tile(col="white") +
scale_fill_viridis(option="inferno", end=0.8) +
ggtitle("Confusion Matrix for Predicted Trajectories") +
geom_text(aes(label = percent(Percent, .1)), col="white") +
theme_pander()
forward_percentages
forward_prediction
forward_prediction$Trajectory <- factor(forward_prediction$Trajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_prediction$PredictedTrajectory <- factor(forward_prediction$PredictedTrajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_percentages <- forward_prediction %>%
filter(I > 1) %>%
#group_by(I, C, R, W, gamma) %>%
#mutate(Count = length(Trajectory)) %>%
ungroup() %>%
group_by(Trajectory, PredictedTrajectory) %>%
summarize(Percent = length(Prob)/nrow(forward_prediction))
#ungroup() %>%
#group_by(Trajectory) %>%
#summarise(Percent = length(Count) / mean(Count))
ggplot(forward_percentages, aes(x=PredictedTrajectory, y=Trajectory, fill=Percent)) +
geom_tile(col="white") +
scale_fill_viridis(option="inferno", end=0.8) +
ggtitle("Confusion Matrix for Predicted Trajectories") +
geom_text(aes(label = percent(Percent, .1)), col="white") +
theme_pander()
forward_percentages
sum(forward_percentages$Percent)
forward_prediction$Trajectory <- factor(forward_prediction$Trajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_prediction$PredictedTrajectory <- factor(forward_prediction$PredictedTrajectory,
levels = c("Resilient", "Recovery", "Chronic", "Delayed"))
forward_percentages <- forward_prediction %>%
filter(I > 1) %>%
#group_by(I, C, R, W, gamma) %>%
#mutate(Count = length(Trajectory)) %>%
ungroup() %>%
group_by(Trajectory, PredictedTrajectory) %>%
summarize(Percent = length(Prob)/nrow(filter(forward_prediction, I> 1)))
#ungroup() %>%
#group_by(Trajectory) %>%
#summarise(Percent = length(Count) / mean(Count))
ggplot(forward_percentages, aes(x=PredictedTrajectory, y=Trajectory, fill=Percent)) +
geom_tile(col="white") +
scale_fill_viridis(option="inferno", end=0.8) +
ggtitle("Confusion Matrix for Predicted Trajectories") +
geom_text(aes(label = percent(Percent, .1)), col="white") +
theme_pander()
