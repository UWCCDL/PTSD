binwidth = 3) +
geom_vline(data=sex_moca_means, aes(xintercept = MoCA, col=SexName),
linetype="dashed", size=1) +
facet_wrap(~ GroupName) +
theme_pander()
eo_spectra <- NULL
for (sub in dir()[grep("[1-9][0-9][0-9][0-9][1-9][0-9]", dir())]) {
fname <- paste(sub, "/",
sub, "o1.txt", sep="")
if (file.exists(fname)) {
table <- read_tsv(fname,
col_types = cols())
if (is.null(eo_spectra)) {
eo_spectra <- table
} else {
eo_spectra <- eo_spectra %>% bind_rows(table)
}
}
}
l_eo_spectra <- pivot_longer(eo_spectra, cols=names(eo_spectra)[3:160],
names_to="Freq")
library(tidyverse)
library(kableExtra)
library(xtable)
library(data.table)
library(ggplot2)
library(ggthemes)
library(ggExtra)
library(colorspace)
library(RColorBrewer)
library(gridExtra)
#library(ggdendro)
library(viridis)
#library(robcor)
#source("./code/QEEG_Emotiv_Analysis_Rscript.R")
knitr::opts_chunk$set(echo = TRUE)
dvs <- read_csv("lasso_regressors.csv",
col_types = cols(
Counter = col_double(),
ID = col_double(),
Group = col_double(),
Sex = col_double(),
Cognitive_status = col_character(),
MoCA = col_double(),
Age = col_double(),
tempID = col_double()
))
dvs %>%
rename(Subject = ID) %>%
mutate(SexName = if_else(Sex == 1, "M", "F"),
GroupName = if_else(Group == 1, "PD", "Control")) -> dvs
sex_table <- with(dvs, table(GroupName, SexName))
sex_table %>%
xtable() %>%
kable() %>%
kable_styling(bootstrap_options = c("hover", "striped"))
chi <- chisq.test(sex_table)
dvs$Subject <- factor(dvs$Subject)
anova <- aov(Age ~ (GroupName * SexName), data=dvs)
anova %>%
xtable() %>%
kable(digits=3) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
sex_age_means <- dvs %>%
group_by(GroupName, SexName) %>%
summarize(Age = mean(Age))
ggplot(dvs, aes(x=Age, fill=SexName, col=SexName)) +
geom_histogram(col="white",
position = position_identity(),
alpha=0.5,
binwidth = 3) +
geom_vline(data=sex_age_means, aes(xintercept = Age, col=SexName),
linetype="dashed", size=1) +
facet_wrap(~ GroupName) +
theme_pander()
anova <- aov(MoCA ~ (GroupName * SexName), data=dvs)
anova %>%
xtable() %>%
kable(digits=3) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
sex_moca_means <- dvs %>%
group_by(GroupName, SexName) %>%
summarise(MoCA = mean(MoCA, na.rm=T))
ggplot(dvs, aes(x=MoCA, fill=SexName, col=SexName)) +
geom_histogram(col="white",
position = position_identity(),
alpha=0.5,
binwidth = 3) +
geom_vline(data=sex_moca_means, aes(xintercept = MoCA, col=SexName),
linetype="dashed", size=1) +
facet_wrap(~ GroupName) +
theme_pander()
eo_spectra <- NULL
for (sub in dir()[grep("[1-9][0-9][0-9][0-9][1-9][0-9]", dir())]) {
fname <- paste(sub, "/",
sub, "o1.txt", sep="")
if (file.exists(fname)) {
table <- read_tsv(fname,
col_types = cols())
if (is.null(eo_spectra)) {
eo_spectra <- table
} else {
eo_spectra <- eo_spectra %>% bind_rows(table)
}
}
}
eo_spectra
eo_spectra <- NULL
for (sub in dir("../eeg_spectra")[grep("[1-9][0-9][0-9][0-9][1-9][0-9]", dir("../eeg_spectra/"))]) {
fname <- paste(sub, "/",
sub, "o1.txt", sep="")
if (file.exists(fname)) {
table <- read_tsv(fname,
col_types = cols())
if (is.null(eo_spectra)) {
eo_spectra <- table
} else {
eo_spectra <- eo_spectra %>% bind_rows(table)
}
}
}
eo_spectra
eo_spectra <- NULL
for (sub in dir("../eeg_spectra")[grep("[1-9][0-9][0-9][0-9][1-9][0-9]", dir("../eeg_spectra/"))]) {
fname <- paste("../eeg_spectra/",
sub, "/", sub, o1.txt", sep="")
eo_spectra <- NULL
for (sub in dir("../eeg_spectra")[grep("[1-9][0-9][0-9][0-9][1-9][0-9]", dir("../eeg_spectra/"))]) {
fname <- paste("../eeg_spectra/",
sub, "/", sub, "o1.txt", sep="")
if (file.exists(fname)) {
table <- read_tsv(fname,
col_types = cols())
if (is.null(eo_spectra)) {
eo_spectra <- table
} else {
eo_spectra <- eo_spectra %>% bind_rows(table)
}
}
}
library(tidyverse)
library(kableExtra)
library(xtable)
library(data.table)
library(ggplot2)
library(ggthemes)
library(ggExtra)
library(colorspace)
library(RColorBrewer)
library(gridExtra)
#library(ggdendro)
library(viridis)
#library(robcor)
#source("./code/QEEG_Emotiv_Analysis_Rscript.R")
knitr::opts_chunk$set(echo = TRUE)
dvs <- read_csv("lasso_regressors.csv",
col_types = cols(
Counter = col_double(),
ID = col_double(),
Group = col_double(),
Sex = col_double(),
Cognitive_status = col_character(),
MoCA = col_double(),
Age = col_double(),
tempID = col_double()
))
dvs %>%
rename(Subject = ID) %>%
mutate(SexName = if_else(Sex == 1, "M", "F"),
GroupName = if_else(Group == 1, "PD", "Control")) -> dvs
sex_table <- with(dvs, table(GroupName, SexName))
sex_table %>%
xtable() %>%
kable() %>%
kable_styling(bootstrap_options = c("hover", "striped"))
chi <- chisq.test(sex_table)
dvs$Subject <- factor(dvs$Subject)
anova <- aov(Age ~ (GroupName * SexName), data=dvs)
anova %>%
xtable() %>%
kable(digits=3) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
sex_age_means <- dvs %>%
group_by(GroupName, SexName) %>%
summarize(Age = mean(Age))
ggplot(dvs, aes(x=Age, fill=SexName, col=SexName)) +
geom_histogram(col="white",
position = position_identity(),
alpha=0.5,
binwidth = 3) +
geom_vline(data=sex_age_means, aes(xintercept = Age, col=SexName),
linetype="dashed", size=1) +
facet_wrap(~ GroupName) +
theme_pander()
anova <- aov(MoCA ~ (GroupName * SexName), data=dvs)
anova %>%
xtable() %>%
kable(digits=3) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
sex_moca_means <- dvs %>%
group_by(GroupName, SexName) %>%
summarise(MoCA = mean(MoCA, na.rm=T))
ggplot(dvs, aes(x=MoCA, fill=SexName, col=SexName)) +
geom_histogram(col="white",
position = position_identity(),
alpha=0.5,
binwidth = 3) +
geom_vline(data=sex_moca_means, aes(xintercept = MoCA, col=SexName),
linetype="dashed", size=1) +
facet_wrap(~ GroupName) +
theme_pander()
eo_spectra <- NULL
for (sub in dir("../eeg_spectra")[grep("[1-9][0-9][0-9][0-9][1-9][0-9]", dir("../eeg_spectra/"))]) {
fname <- paste("../eeg_spectra/",
sub, "/", sub, "o1.txt", sep="")
if (file.exists(fname)) {
table <- read_tsv(fname,
col_types = cols())
if (is.null(eo_spectra)) {
eo_spectra <- table
} else {
eo_spectra <- eo_spectra %>% bind_rows(table)
}
}
}
l_eo_spectra <- pivot_longer(eo_spectra, cols=names(eo_spectra)[3:160],
names_to="Freq")
l_eo_spectra$Frequency <- as.numeric(substr(l_eo_spectra$Freq,
0, str_length(l_eo_spectra$Freq) -2))
l_eo_spectra <- l_eo_spectra %>%
rename(Power = value) %>%
add_column(Recording = "Eyes Open") %>%
filter(Frequency < 50)
l_eo_spectra <- l_eo_spectra %>%
add_column(Band="Delta", BandMin=0, BandMax=4)
l_eo_spectra$Band[l_eo_spectra$Frequency <= 50] <- "Gamma"
l_eo_spectra$Band[l_eo_spectra$Frequency < 30] <- "High Beta"
l_eo_spectra$Band[l_eo_spectra$Frequency < 18] <- "Upper Beta"
l_eo_spectra$Band[l_eo_spectra$Frequency < 15] <- "Low Beta"
l_eo_spectra$Band[l_eo_spectra$Frequency < 13] <- "Alpha"
l_eo_spectra$Band[l_eo_spectra$Frequency < 8] <- "Theta"
l_eo_spectra$Band[l_eo_spectra$Frequency < 4] <- "Delta"
l_eo_spectra$BandMin[l_eo_spectra$Frequency <= 50] <- 30
l_eo_spectra$BandMin[l_eo_spectra$Frequency < 30] <- 18
l_eo_spectra$BandMin[l_eo_spectra$Frequency < 18] <- 15
l_eo_spectra$BandMin[l_eo_spectra$Frequency < 15] <- 13
l_eo_spectra$BandMin[l_eo_spectra$Frequency < 13] <- 8
l_eo_spectra$BandMin[l_eo_spectra$Frequency < 8] <- 4
l_eo_spectra$BandMin[l_eo_spectra$Frequency < 4] <- 0
l_eo_spectra$BandMax[l_eo_spectra$Frequency <= 50] <- 49.6
l_eo_spectra$BandMax[l_eo_spectra$Frequency < 30] <- 30
l_eo_spectra$BandMax[l_eo_spectra$Frequency < 18] <- 18
l_eo_spectra$BandMax[l_eo_spectra$Frequency < 15] <- 15
l_eo_spectra$BandMax[l_eo_spectra$Frequency < 13] <- 13
l_eo_spectra$BandMax[l_eo_spectra$Frequency < 8] <- 8
l_eo_spectra$BandMax[l_eo_spectra$Frequency < 4] <- 4
l_eo_spectra$Band <- factor(l_eo_spectra$Band,
levels = c("Delta", "Theta", "Alpha",
"Low Beta", "Upper Beta",
"High Beta", "Gamma"))
l_eo_spectra <- l_eo_spectra %>%
filter(Subject %in% dvs$Subject)
gd <- l_eo_spectra %>%
group_by(Band) %>%
summarise(
Min = mean(BandMin),
Max = mean(BandMax),
Power =mean(Power),
Frequency = mean(BandMin)
)
ggplot(data=l_eo_spectra, aes(x=Frequency, y=Power, Channel)) +
geom_rect(data = gd, aes(xmin = Min, xmax = Max, fill = Band),
ymin=0, ymax=Inf, colour=NA, alpha=0.5) +
stat_summary(fun.data=mean_sdl,
geom = "ribbon", colour = "white", alpha = 0.4) +
stat_summary(fun = mean, geom = "line", lwd = 1) +
facet_wrap(~ Channel, ncol=4) +
scale_alpha_manual(values = seq(0.1, 0.9, 0.1)) +
ggtitle("Eyes-Open Power Spectrum Across Channels") +
ylab("Log Power") +
xlab("Frequency (Hz)") +
theme_pander() +
coord_cartesian(xlim=c(1, 50), ylim=c(5, 17)) + #ylim=c(5,17)) +
scale_fill_brewer(palette = "Set3") +
theme(plot.title = element_text(hjust = 0.5))
K <- brewer.pal(7, "Set3")
l_spectra <- l_eo_spectra
al_spectra <- l_spectra %>%
group_by(Subject, Frequency, Band, Recording) %>%
summarise(Power = mean(Power))
al_spectra <- al_spectra %>% ungroup()
ggplot(data=al_spectra, aes(x = Frequency, y = Power,
col = Recording, fill = Recording)) +
annotate("rect", xmin = 0, xmax = 4, ymin = 0, ymax = Inf,
alpha = 0.5, fill=K[1]) +
annotate("rect", xmin = 4, xmax = 8, ymin = 0, ymax = Inf,
alpha = 0.5, fill=K[2]) +
annotate("rect", xmin = 8, xmax = 13, ymin = 0, ymax = Inf,
alpha = 0.5, fill=K[3]) +
annotate("rect", xmin = 13, xmax = 15, ymin = 0, ymax = Inf,
alpha = 0.5, fill=K[4]) +
annotate("rect", xmin = 15, xmax = 18, ymin = 0, ymax = Inf,
alpha = 0.5, fill = K[5]) +
annotate("rect", xmin = 18, xmax = 30, ymin = 0, ymax = Inf,
alpha = 0.5, fill=K[6]) +
annotate("rect", xmin = 30, xmax = 50, ymin = 0, ymax = Inf,
alpha = 0.5, fill=K[7]) +
stat_summary(fun.data = mean_sdl, geom = "ribbon",
alpha = 0.5, col = "white") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
stat_summary(fun = mean, geom = "line", lwd = 2) +
coord_cartesian(xlim=c(0, 50), ylim=c(5,18)) +
xlab("Frequency (Hz)") +
ylab("Log Power") +
theme_pander() +
annotate("text", x=2, y=18, label="Delta", angle=90, hjust=1) +
annotate("text", x=6, y=18, label="Theta", angle=90, hjust=1) +
annotate("text", x=10.5, y=18, label="Alpha", angle=90, hjust=1) +
annotate("text", x=14, y=18, label="Low Beta", angle=90, hjust=1) +
annotate("text", x=16.5, y=18, label="Upper Beta", angle=90, hjust=1) +
annotate("text", x=24, y=18, label="High Beta", angle=90, hjust=1) +
annotate("text", x=35, y=18, label="Gamma", angle=90, hjust=1)
Adata_eo <- l_eo_spectra %>%
group_by(Subject, Channel, Band, Recording) %>%
summarize(Power=mean(Power))
Adata_eo$Subject <- as_factor(Adata_eo$Subject)
Fdata_eo <- inner_join(Adata_eo, dvs, by = "Subject")
Cdata_eo <- Fdata_eo %>%
group_by(Group, Channel, Band) %>%
summarise(r = cor(Power, Group),
p = cor.test(Power, Group)$p.value)
Adata_eo
Adata_eo <- l_eo_spectra %>%
group_by(Subject, Channel, Band, Recording) %>%
summarize(Power=mean(Power))
Adata_eo$Subject <- as_factor(Adata_eo$Subject)
Fdata_eo <- inner_join(Adata_eo, dvs, by = "Subject")
Cdata_eo <- Fdata_eo %>%
group_by(Group, Channel, Band) %>%
summarise(r = cor(Power, Group),
p = cor.test(Power, Group)$p.value)
Fdata_eo
Cdata_eo <- Fdata_eo %>%
group_by(Channel, Band) %>%
summarise(r = cor(Power, Group),
p = cor.test(Power, Group)$p.value)
ggplot(Rdata_eo, aes(x = Band, y = r, col = Channel)) +
geom_point() +
stat_summary(fun.data = "mean_se", col="black",
alpha=0.5, geom = "errorbar") +
facet_wrap(~ material) +
ggtitle("Correlation, by Band") +
ylab("r value") +
annotate("segment", x=-Inf, xend=Inf, y=0.28, yend = 0.28, lty=2) +
annotate("segment", x=-Inf, xend=Inf, y=-0.28, yend = -0.28, lty=2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_pander()
ggplot(Cdata_eo, aes(x = Band, y = r, col = Channel)) +
geom_point() +
stat_summary(fun.data = "mean_se", col="black",
alpha=0.5, geom = "errorbar") +
facet_wrap(~ material) +
ggtitle("Correlation, by Band") +
ylab("r value") +
annotate("segment", x=-Inf, xend=Inf, y=0.28, yend = 0.28, lty=2) +
annotate("segment", x=-Inf, xend=Inf, y=-0.28, yend = -0.28, lty=2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_pander()
ggplot(Cdata_eo, aes(x = Band, y = r, col = Channel)) +
geom_point() +
stat_summary(fun.data = "mean_se", col="black",
alpha=0.5, geom = "errorbar") +
ggtitle("Correlation, by Band") +
ylab("r value") +
annotate("segment", x=-Inf, xend=Inf, y=0.28, yend = 0.28, lty=2) +
annotate("segment", x=-Inf, xend=Inf, y=-0.28, yend = -0.28, lty=2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_pander()
ggplot(Cdata_eo, aes(x = Band, y = p, col = Channel)) +
geom_point() +
stat_summary(fun.data = "mean_se", col="black",
alpha=0.5, geom = "errorbar") +
ggtitle("p-value, by Band") +
ylab("p value") +
annotate("segment", x=-Inf, xend=Inf, y=0.05, yend = 0.05, lty=2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_log10() +
theme_pander()
library(gglasso)
install.packages("gglasso")
install.packages(c("bayestestR", "blob", "broom", "cli", "colorspace", "cpp11", "credentials", "curl", "dplyr", "e1071", "gargle", "gert", "ggplot2", "glmnet", "googledrive", "googlesheets4", "isoband", "jpeg", "lavaan", "lwgeom", "matrixcalc", "matrixStats", "mime", "OpenMx", "performance", "plotly", "raster", "Rcpp", "RcppArmadillo", "readr", "rgl", "rmarkdown", "rvest", "semTools", "sf", "smoothr", "stringi", "tibble", "utf8", "xfun"))
library(gglasso)
wfdata <- Fdata_eo %>%
pivot_wider(id_cols = c("Subject", "Channel",
"Band", "Group"),
names_from = c("Channel", "Band"),
values_from = c("Power"))
wide_data_eo <- wfdata
channel_names <- sort(unique(l_spectra$Channel))
# c("AF3", "AF4", "F3", "F4",
#                    "F7", "F8", "FC5", "FC6",
#                    "T7", "T8", "P7", "P8",
#                    "O1", "O2")
band_names <- c("Delta", "Theta", "Alpha", "Low Beta",
"Upper Beta", "High Beta", "Gamma")
by_band_order <- as.vector(
outer(
band_names,
channel_names,
function(y, x){
paste(x, y, sep="_")
}))
# Predictors
X <- wide_data_eo[,3:198] %>%
#select(ends_with("Beta")) %>%
as.matrix()
X <- X[,by_band_order]
# We need to reorder X by frequency bands
# Maps
Y <- wide_data_eo[,c(2)] %>%
as.matrix()
Y <- Y * 2 - 3
bands <- rep(1:7, each=28)
channels <- sort(rep(1:28, 7))
fit <- gglasso(x = X, y = Y,
group = bands,
loss = 'logit')
coef.mat=fit$beta
fit.cv <- cv.gglasso(x = X,
y = Y,
group = bands,
pred.loss = "L1",
loss="logit",
#nlambda = 100,
#lambda.factor = 0.001,
nfolds = 50)
# Best lambda
lmin <- fit.cv$lambda.min  # Optimal lambda, maximizes generalization
l1se <- fit.cv$lambda.1se  # Conservative model, min + 1SE
plot(fit.cv,
pch=20,
lwd=2)
plot(fit, group=T,
col = inferno(length(unique(fit$group)) + 1),
lwd = 2)
legend(x="topright",
legend=c("Delta", "Theta", "Alpha",
"Low Beta", "Upper Beta", "High Beta",
"Gamma"),
bty="n",
ncol=2,
col=inferno(length(unique(fit$group)) + 1),
lty=1, lwd=2)
abline(v=log(lmin), lty=2)
abline(v=log(l1se), lty=2)
prediction <- predict(object = fit,
newx = X,
s = lmin,
type='link')
observed <- data.frame(Subject = wide_data_eo$Subject,
Group = as_vector(Y),
Condition = "Observed")
predicted <- data.frame(Subject = wide_data_eo$Subject,
Group = as_vector(prediction),
Condition = "Predicted") %>%
rename(Group = X1)
comparison <- as_tibble(rbind(observed, predicted))
plt = cbind(Y,
predict(object = fit,
newx = X,
s = lmin,
type='link'))
# matplot(plt,
#         main="Predicted vs Actual",
#         type='b',
#         lwd=2,
#         pch="o",
#         col=viridis(3),
#         xlab="Subject",
#         ylab="Rate of Forgetting (alpha)")
ggplot(comparison, aes(x=reorder(Subject, Group), y=Group), col=Condition) +
geom_point(aes(col=Condition)) +
geom_line(alpha=0.5, lty=2) +
xlab("Subject") +
annotate("text", x= 40, y = 0.20,
label=(paste("r =",
round(cor(Y, prediction),
2)))) +
theme_pander() +
ylab("Rate of Forgetting")+
ggtitle("Cross-Validation:\nPredicted vs. Observed Rates of Forgetting") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 6))
setwd("~/Documents/Research/PTSD/analysis")
knitr::opts_chunk$set(echo = TRUE)
library(Hmisc)
library(tidyverse)      # The foundation
library(ggplot2)        # The foundatio for plots
library(broom)
library(scales)
library(ggthemes)       # Needs for theme_pander()
library(ggrepel)        # Needed for labels in pie charts
library(viridis)        # For color-blind graded scales (using plasma)
library(ggsci)          # Modern discrete color palettes (D3, JAMA)
library(RColorBrewer)   # Custom scales (purple scale is used)
library(kableExtra)     # Tables
library(xtable)         # Tables
library(gridExtra)      # Multi plot alignment
library(patchwork)      # Multi-plot alignment
library(ggseg)          # Brain visualization (standard DK atlas)
vals <- read_tsv("loglikelihoods.tsv")
View(vals)
